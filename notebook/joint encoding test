{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c868a102-7458-4bf4-801b-866f3bc0cb7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.webio.node+json": {
       "children": [],
       "instanceArgs": {
        "namespace": "html",
        "tag": "div"
       },
       "nodeType": "DOM",
       "props": {},
       "type": "node"
      },
      "text/html": [
       "<div style=\"padding: 1em; background-color: #f8d6da; border: 1px solid #f5c6cb; font-weight: bold;\">\n",
       "<p>The WebIO Jupyter extension was not detected. See the\n",
       "<a href=\"https://juliagizmos.github.io/WebIO.jl/latest/providers/ijulia/\" target=\"_blank\">\n",
       "    WebIO Jupyter integration documentation\n",
       "</a>\n",
       "for more information.\n",
       "</div>\n"
      ],
      "text/plain": [
       "WebIO._IJuliaInit()"
      ]
     },
     "metadata": {
      "@webio": {
       "kernelId": "b27542ad-f399-4e5c-9956-27e284080dbd"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "using NeuroPALData, DelimitedFiles, ANTSUNData, HDF5, JSON, PyPlot,\n",
    "    PyCall, Statistics, Combinatorics, LinearAlgebra, FlavellBase, NaNMath,\n",
    "    Distances, StatsBase, Random, Suppressor, LinearAlgebra, ProgressMeter,\n",
    "    FlavellConstants, EncoderModelGen, HypothesisTests,\n",
    "    CePNEMAnalysis, YAML, Clustering, JLD2, Distributions, MultipleTesting,\n",
    "    KernelDensity, ConnectomePlot, Colors, HierarchicalPosteriorModel, GLM, DataFrames\n",
    "zstd = FlavellBase.standardize\n",
    "\n",
    "rc_params = PyDict(pyimport(\"matplotlib\")[\"rcParams\"]);\n",
    "rc_params[\"font.sans-serif\"] = [\"Arial\"];\n",
    "rc_params[\"font.size\"] = 7;\n",
    "fix_plot() = (margins(0.05); tick_params(direction = \"out\");\n",
    "    ax = gca(); ax[:xaxis][:tick_bottom]();\n",
    "    ax[:yaxis][:tick_left]();\n",
    "    ax[:spines][\"top\"][\"set_visible\"](false);\n",
    "    ax[:spines][\"right\"][\"set_visible\"](false););"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "baacdcd9-71af-4232-b361-d5b377518054",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"/data1/prj_kfc/figure/manuscript/cell_draft2/figure6\""
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path_fig_root = \"/data1/prj_kfc/figure/manuscript/cell_draft2/figure6/\"\n",
    "mkpath(path_fig_root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98f092e1-17a0-4d3e-8876-9175291e9b39",
   "metadata": {},
   "outputs": [],
   "source": [
    "py_scipy = pyimport(\"scipy\")\n",
    "py_nx = pyimport(\"networkx\")\n",
    "py_copy = pyimport(\"copy\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed582c45-d222-4e1c-bbca-db8a22285d33",
   "metadata": {},
   "outputs": [],
   "source": [
    "θh_pos_is_ventral = YAML.load_file(\"/data1/prj_kfc/data/data_constant/pos_is_ventral.yaml\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a87e97e-7c56-4929-a9f2-7802c35c0a28",
   "metadata": {},
   "source": [
    "## Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d13a298-946d-4799-a1a5-35fc38903712",
   "metadata": {},
   "source": [
    "### Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d73caf9-60f3-4301-bbaf-4e5dd554519e",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_uid_baseline = sort([\"2022-06-14-01\", \"2022-06-14-07\",\n",
    "    \"2022-06-14-13\", \"2022-06-28-01\", \"2022-06-28-07\",\n",
    "    \"2022-07-15-06\", \"2022-07-15-12\",\n",
    "    \"2022-07-20-01\", \"2022-07-26-01\", \"2022-08-02-01\",\n",
    "    \"2023-01-09-28\", \"2023-01-17-01\", \"2023-01-19-01\",\n",
    "    \"2023-01-19-08\", \"2023-01-19-15\", \"2023-01-19-22\",\n",
    "    \"2023-01-23-01\", \"2023-01-23-08\", \"2023-01-23-15\", \"2023-01-23-21\",\n",
    "    \"2023-03-07-01\"])\n",
    "\n",
    "list_uid_heat = [\"2022-12-21-06\", \"2023-01-05-01\", \"2023-01-05-18\",\n",
    "    \"2023-01-06-01\", \"2023-01-06-08\", \"2023-01-06-15\", \"2023-01-09-08\",\n",
    "    \"2023-01-09-15\", \"2023-01-09-22\", \"2023-01-10-07\", \"2023-01-10-14\",\n",
    "    \"2023-01-13-07\", \"2023-01-16-01\", \"2023-01-16-08\", \"2023-01-16-15\",\n",
    "    \"2023-01-16-22\", \"2023-01-17-07\", \"2023-01-17-14\", \"2023-01-18-01\"] |> sort;\n",
    "# short: \"2022-05-17-01\", \"2022-05-17-06\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9744413f-7143-41ba-8c41-1ab3613c72c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_uid = vcat(list_uid_baseline, list_uid_heat); length(list_uid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a132026-fba7-42cc-879d-7fb9fc4a3233",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:04\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "list_data_dict = []\n",
    "@showprogress for (idx_uid, data_uid) = enumerate(list_uid)\n",
    "    path_data = \"/scratch/prj_kfc/processed_h5/$(data_uid)-data.h5\"\n",
    "    data_dict = import_data(path_data, custom_keys=[\"neuropal_registration\"])\n",
    "\n",
    "    push!(list_data_dict, data_dict)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8b33a90-d14b-46a2-b3c2-4f3475dca237",
   "metadata": {},
   "source": [
    "### Load NeuroPAL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4cb17f06-1dd9-4592-9f8e-6e353aab40df",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# list_neuropal_label = []\n",
    "# for (idx_uid, data_uid) = enumerate(list_uid)\n",
    "#     path_label = joinpath(\"/data1/prj_neuropal/data/neuropal_label_prj_kfc/\", \"$(data_uid) Neuron ID.xlsx\")\n",
    "#     # println(data_uid)\n",
    "#     push!(list_neuropal_label, import_neuropal_label(path_label))\n",
    "# end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7bb5c6b8-97de-4d2b-830e-73f140fffa42",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_neuropal_label = load(\"/scratch/prj_kfc/list_neuropal_label.jld2\")[\"list_neuropal_label\"];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5d631976-e953-4791-a10c-e9a0a3f646a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:01:04\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "# path_h5_enc = \"/data1/prj_kfc/data/gen_analysis_data/2022-10-14-neuropal-enc.h5\"\n",
    "path_h5_enc = \"/scratch/prj_kfc/2023-03-31-neuropal-baseline-enc.h5\"\n",
    "path_h5_enc_heat = \"/scratch/prj_kfc/2023-03-07-neuropal-heatstim-enc.h5\"\n",
    "list_dict_fit = []\n",
    "\n",
    "@showprogress for uid = list_uid\n",
    "    if uid in list_uid_baseline\n",
    "        push!(list_dict_fit, h5read(path_h5_enc, uid))\n",
    "    elseif uid in list_uid_heat\n",
    "        push!(list_dict_fit, h5read(path_h5_enc_heat, uid))        \n",
    "    else\n",
    "        error(\"$uid does not exist\")\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f98165c9-ae48-4be8-9518-484486370c9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_neuropal_order_info = readdlm(\"/data1/prj_neuropal/data/neuropal_label_prj_kfc/NeuroPAL order LR.csv\",',');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1a73c5c7-d087-4c8e-88df-5a67ec68b98d",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_class_dv = get_list_class_dv(map(x->x[1],list_neuropal_label));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "84f3279c-063f-49f8-8b52-d4b0563e0e70",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass ASE is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n",
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass IL1 is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n",
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass IL2 is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n",
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass RMH is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n",
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass SAAD is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n",
      "\u001b[33m\u001b[1m┌ \u001b[22m\u001b[39m\u001b[33m\u001b[1mWarning: \u001b[22m\u001b[39mclass SABV is not in the orderling file\n",
      "\u001b[33m\u001b[1m└ \u001b[22m\u001b[39m\u001b[90m@ NeuroPALData ~/.julia/packages/NeuroPALData/P9Wwv/src/class.jl:100\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "list_class_ordered = generate_list_class_custom_order(list_neuropal_order_info, list_class_dv);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "16b6c21f-803d-45fd-a6eb-33ed5e48ecf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2-element Vector{String}:\n",
       " \"SIA\"\n",
       " \"SMB\""
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_class_classify_dv_enc = [\"SIA\",\"SMB\"] # classify based on D/V tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "79fedcf3-548b-47d7-b655-9545f9bcbb87",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_match_dict = get_list_match_dict(list_neuropal_label, list_data_dict=list_data_dict, list_dict_fit=list_dict_fit,\n",
    "    list_class_ordered=list_class_ordered,\n",
    "    list_class_classify_dv_enc=list_class_classify_dv_enc, θ_confidence_label=2.5);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b6934f6a-fca7-4380-af25-67c29c82e0f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_uid_no_pumping = h5read(path_h5_enc, \"list_uid_invalid_pt\")\n",
    "list_uid_pumping = setdiff(list_uid, list_uid_no_pumping)\n",
    "list_idx_uid_pumping = [idx_uid for idx_uid = 1:length(list_uid) if list_uid[idx_uid] in list_uid_pumping];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7939cad9-b9b7-45cd-93e7-7e5e35c53f45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "missing (in the ordering file but not in the matches): Any[\"AVG\", \"RIG\", \"DB02\", \"DD01\", \"VB01\", \"ADF\"]\n",
      "n(class): 97\n"
     ]
    }
   ],
   "source": [
    "list_class_dv_ordered = let\n",
    "    list_all_class = unique(vcat(map(x->collect(keys(x[2])), list_match_dict)...))\n",
    "    list_intersect = intersect(map(x->x[2], list_class_ordered), list_all_class)\n",
    "    println(\"missing (in the ordering file but not in the matches): \", setdiff(setdiff(map(x->x[2], list_class_ordered), list_all_class)))\n",
    "    println(\"n(class): $(length(list_intersect))\")\n",
    "    list_intersect\n",
    "end;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d053b84b-9e12-4fb0-8a08-4e0c6293b2e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "function get_list_use_rg_t(list_uid, list_uid_heat, list_dict_fit; θ_pumping=0.5)\n",
    "    list_all = Tuple{String,Vector{Int}}[]\n",
    "    list_pumping = Tuple{String,Vector{Int}}[]\n",
    "    \n",
    "    for (i_uid, uid) = enumerate(list_uid)\n",
    "        lattice_range_p = list_dict_fit[i_uid][\"lattice_range\"][\"P\"]\n",
    "        \n",
    "        q_heat = uid in list_uid_heat\n",
    "        rg_t = q_heat ? Int[1] : 1:length(lattice_range_p)\n",
    "        \n",
    "        list_rg_t_all = Int[]\n",
    "        list_rg_t_pumping = Int[]\n",
    "        \n",
    "        for i_rg_t = rg_t\n",
    "            # check pumping variance\n",
    "            lattice_p = lattice_range_p[\"$i_rg_t\"]\n",
    "            if abs(lattice_p[2] - lattice_p[1]) .> θ_pumping\n",
    "                push!(list_rg_t_pumping, i_rg_t)\n",
    "            end\n",
    "            \n",
    "            push!(list_rg_t_all, i_rg_t)\n",
    "        end\n",
    "        \n",
    "        push!(list_all, (uid, list_rg_t_all))\n",
    "        push!(list_pumping, (uid, list_rg_t_pumping))\n",
    "    end\n",
    "    \n",
    "    list_all, list_pumping\n",
    "end\n",
    "\n",
    "list_uid_use_all, list_uid_use_pumping = get_list_use_rg_t(list_uid, list_uid_heat, list_dict_fit);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88b7fb8d-74c3-43b7-9c9a-6de9a4b63711",
   "metadata": {},
   "source": [
    "## Connectome"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "458ee7b0-46e2-4d05-9cbc-92897eb8bec1",
   "metadata": {},
   "source": [
    "### Connectome - White et al L/R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2f32fd6e-a50a-4e6d-b5a3-b9c22a7b8501",
   "metadata": {},
   "outputs": [],
   "source": [
    "g_wh_lr = get_graph_white(0)\n",
    "list_sensory_wh_lr, list_muscle_wh_lr = get_sensory_muscle(g_wh_lr);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c4ff9c56-ce2a-41ed-ab4b-6990b1e5bf0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "g_wh_lr_p = get_graph_white_p(0)\n",
    "list_sensory_wh_lr_p, list_muscle_wh_lr_p = get_sensory_muscle(g_wh_lr_p);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "194dc2b4-b149-4c11-ae43-b07c65e346ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "g_wv = get_graph_witvliet(2, merge_lr=true)\n",
    "# list_sensory_wv, list_muscle_wv = get_sensory_muscle(g_wv);\n",
    "\n",
    "g_wv_lr = get_graph_witvliet(2);\n",
    "# list_sensory_wv_lr, list_muscle_wv_lr = get_sensory_muscle(g_wv_lr);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2f73e0df-ac8f-4ee3-8d69-b70e85f06c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_pos_z_non_p = Base.ImmutableDict(ConnectomePlot.dict_pos_z_non_p...)\n",
    "dict_pos_v2_non_p = Base.ImmutableDict(ConnectomePlot.dict_pos_v2_non_p...)\n",
    "dict_pos_v3_non_p = Base.ImmutableDict(ConnectomePlot.dict_pos_v3_non_p...)\n",
    "\n",
    "dict_pos_z_p = Base.ImmutableDict(ConnectomePlot.dict_pos_z_p...)\n",
    "dict_pos_v2_p = Base.ImmutableDict(ConnectomePlot.dict_pos_v2_p...)\n",
    "dict_pos_v3_p = Base.ImmutableDict(ConnectomePlot.dict_pos_v3_p...)\n",
    "\n",
    "dict_pos_v2_patch, dict_pos_z_patch = get_dict_pos_patched();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "972dfb3d-3bc5-4c88-aac4-5a18eaf33e14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "get_match_neuron (generic function with 1 method)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function get_match_neuron(class_dv, list_g_node)\n",
    "    list_neuron = String[]\n",
    "    if class_dv ∈ list_g_node\n",
    "        push!(list_neuron, class_dv)\n",
    "    end\n",
    "\n",
    "    if class_dv * \"L\" ∈ list_g_node\n",
    "        push!(list_neuron, class_dv * \"L\")\n",
    "    end\n",
    "    \n",
    "    if class_dv * \"R\" ∈ list_g_node\n",
    "        push!(list_neuron, class_dv * \"R\")\n",
    "    end\n",
    "    \n",
    "    list_neuron\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdcfaffc-fa27-412c-badc-9a1e20e939a6",
   "metadata": {},
   "source": [
    "## Joint encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fcfea2a5-698a-46c7-833a-aa6a2f740af0",
   "metadata": {},
   "outputs": [],
   "source": [
    "joint_ec_mat = load(\"/data1/prj_neuropal/data/ec_together_clust.jld2\")[\"ec_together_clust\"];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ac49b667-ddf8-49a2-9443-b62b29310f6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "joint_ec_mat_list = [\"IL1D\", \"SMBV\", \"AIA\", \"IL1L\", \"ASI\", \"RIA\", \"RMD\", \"RMF\", \"CEPV\", \"URYV\", \"IL1V\", \"URYD\", \"RIC\", \"AVK\", \"RME\", \"RMDD\", \"IL2L\", \"AVL\", \"RMEV\", \"SMDD\", \"OLL\", \"RMDV\", \"AIY\", \"OLQD\", \"URX\", \"OLQV\", \"AUA\", \"URB\", \"M5\", \"AIZ\"];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "20459538-1430-4cf3-936e-74988d601554",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IL1D\n",
      "SMBV\n",
      "AIA\n",
      "IL1L\n",
      "ASI\n",
      "RIA\n",
      "RMD\n",
      "RMF\n",
      "CEPV\n",
      "URYV\n",
      "IL1V\n",
      "URYD\n",
      "RIC\n",
      "AVK\n",
      "RME\n",
      "RMDD\n",
      "IL2L\n",
      "AVL\n",
      "RMEV\n",
      "SMDD\n",
      "OLL\n",
      "RMDV\n",
      "AIY\n",
      "OLQD\n",
      "URX\n",
      "OLQV\n",
      "AUA\n",
      "URB\n",
      "M5\n",
      "AIZ\n"
     ]
    }
   ],
   "source": [
    "println.(joint_ec_mat_list);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4384b3eb-6b7a-4c36-bb43-13cbba008ce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 640x480 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "PyObject <matplotlib.image.AxesImage object at 0x7fe10ab58c40>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imshow(joint_ec_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "08cfcc42-48ad-496b-9876-652336d9e88b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3-element Vector{UnitRange{Int64}}:\n",
       " 1:6\n",
       " 7:17\n",
       " 18:30"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_cluster_idx = [1:6,7:17,18:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "aff878d3-8436-469f-bafd-82c872adab43",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_cluster_frac = let\n",
    "    g_c = get_graph_witvliet(2, merge_lr=false, synapse_electrical=false, synapse_chemical=true)\n",
    "    g_e = get_graph_witvliet(2, merge_lr=false, synapse_electrical=true, synapse_chemical=false)\n",
    "    list_node_c = collect(g_c.nodes())\n",
    "    list_node_e = collect(g_e.nodes())\n",
    "    \n",
    "    list_node_all = union(list_node_c, list_node_e)\n",
    "    \n",
    "    \n",
    "    list_fraction = []\n",
    "    \n",
    "    for (i_clust, cluster_idx) = enumerate(list_cluster_idx)\n",
    "        list_neurons = joint_ec_mat_list[cluster_idx]\n",
    "        \n",
    "        n_no = 0\n",
    "        n_uni = 0\n",
    "        n_bi_e = 0\n",
    "        n_bi_c = 0\n",
    "        \n",
    "        for (i1,n1) = enumerate(list_neurons)\n",
    "            for (i2,n2) = enumerate(list_neurons)\n",
    "                list_n1 = get_match_neuron(n1, list_node_all)\n",
    "                list_n2 = get_match_neuron(n2, list_node_all)\n",
    "\n",
    "                \n",
    "                for n1_ = list_n1, n2_ = list_n2\n",
    "                    n_q_edge_g_c = g_c.has_edge(n1_, n2_) + g_c.has_edge(n2_, n1_)\n",
    "                    n_q_edge_g_e = g_e.has_edge(n1_, n2_) + g_e.has_edge(n2_, n1_)\n",
    "\n",
    "                    if n_q_edge_g_c + n_q_edge_g_e  == 0\n",
    "                        n_no += 1\n",
    "                    elseif n_q_edge_g_c == 1 && n_q_edge_g_e == 0\n",
    "                        n_uni += 1\n",
    "                    elseif n_q_edge_g_c == 2\n",
    "                        n_bi_c += 1\n",
    "                    elseif n_q_edge_g_e == 2\n",
    "                        n_bi_e += 1\n",
    "                    else\n",
    "                        error(\"n_q_edge is $n_q_edge for $n1 and $n2\")\n",
    "                    end\n",
    "                end\n",
    "                \n",
    "            end\n",
    "        end\n",
    "        \n",
    "        dict_ = Dict(\"no\"=>n_no, \"uni\"=>n_uni, \"bi_e\"=>n_bi_e, \"bi_c\"=>n_bi_c)\n",
    "        push!(list_fraction, dict_)\n",
    "    end\n",
    "    \n",
    "    list_fraction\n",
    "end;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c1887506-3374-4246-b6b1-65c248782afd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_rand = 1000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff92707f-357e-4227-b6bd-846715ec28b2",
   "metadata": {},
   "source": [
    "### Shuffle all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "67cf4960-60ce-4185-8cc4-1cafdf7ea150",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:08\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "list_cluster_frac_rand = let\n",
    "    g_c = get_graph_witvliet(2, merge_lr=false, synapse_electrical=false, synapse_chemical=true)\n",
    "    g_e = get_graph_witvliet(2, merge_lr=false, synapse_electrical=true, synapse_chemical=false)\n",
    "    list_node_c = collect(g_c.nodes())\n",
    "    list_node_e = collect(g_e.nodes())\n",
    "    \n",
    "    list_node_all = union(list_node_c, list_node_e)\n",
    "    \n",
    "    list_result = []\n",
    "    \n",
    "    @showprogress for n_rand = 1:n_rand\n",
    "        # rand_joint_ec_mat_list = shuffle(joint_ec_mat_list)\n",
    "        rand_joint_ec_mat_list = sample(list_node_all, length(joint_ec_mat_list), replace=false)\n",
    "    \n",
    "        list_fraction = []\n",
    "\n",
    "        for (i_clust, cluster_idx) = enumerate(list_cluster_idx)\n",
    "            list_neurons = rand_joint_ec_mat_list[cluster_idx]\n",
    "\n",
    "            n_no = 0\n",
    "            n_uni = 0\n",
    "            n_bi_e = 0\n",
    "            n_bi_c = 0\n",
    "\n",
    "            for (i1,n1) = enumerate(list_neurons)\n",
    "                for (i2,n2) = enumerate(list_neurons)\n",
    "                    list_n1 = get_match_neuron(n1, list_node_all)\n",
    "                    list_n2 = get_match_neuron(n2, list_node_all)\n",
    "\n",
    "\n",
    "                    for n1_ = list_n1, n2_ = list_n2\n",
    "                        n_q_edge_g_c = g_c.has_edge(n1_, n2_) + g_c.has_edge(n2_, n1_)\n",
    "                        n_q_edge_g_e = g_e.has_edge(n1_, n2_) + g_e.has_edge(n2_, n1_)\n",
    "\n",
    "                        if n_q_edge_g_c + n_q_edge_g_e  == 0\n",
    "                            n_no += 1\n",
    "                        elseif n_q_edge_g_c == 1 && n_q_edge_g_e == 0\n",
    "                            n_uni += 1\n",
    "                        elseif n_q_edge_g_c == 2\n",
    "                            n_bi_c += 1\n",
    "                        elseif n_q_edge_g_e == 2\n",
    "                            n_bi_e += 1\n",
    "                        else\n",
    "                            error(\"n_q_edge is $n_q_edge for $n1 and $n2\")\n",
    "                        end\n",
    "                    end\n",
    "\n",
    "                end\n",
    "            end\n",
    "\n",
    "            dict_ = Dict(\"no\"=>n_no, \"uni\"=>n_uni, \"bi_e\"=>n_bi_e, \"bi_c\"=>n_bi_c)\n",
    "            push!(list_fraction, dict_)\n",
    "        end\n",
    "\n",
    "        push!(list_result, list_fraction)\n",
    "    end\n",
    "    \n",
    "    list_result\n",
    "end;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "bd78ad9e-a85e-4405-b868-cde3308ea5f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->x[i_c][\"bi_e\"], list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = list_cluster_frac[i_c][\"bi_e\"]\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C3\")\n",
    "    \n",
    "    title(\"Electrical\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "4f4eaff8-0759-4210-a2e3-e68364d8c05c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->x[i_c][\"uni\"], list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = list_cluster_frac[i_c][\"uni\"]\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C1\")\n",
    "    \n",
    "    \n",
    "    title(\"Chemical (unidirectional)\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    \n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c793b2db-55de-4082-9aee-d312f16aa12c",
   "metadata": {},
   "outputs": [],
   "source": [
    "0.002"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "b3baba77-ef7a-455b-bce4-b800adce7946",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.998\n",
      "1.0\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# gap junction\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->x[i_c][\"bi_e\"], list_cluster_frac_rand)\n",
    "    actual_ = list_cluster_frac[i_c][\"bi_e\"]\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "7e881b01-aef1-45a2-bed7-a5acf946d339",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.866\n",
      "1.0\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# uni-directional\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->x[i_c][\"uni\"], list_cluster_frac_rand)\n",
    "    actual_ = list_cluster_frac[i_c][\"uni\"]\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "42f74354-8c5a-4565-9270-6e64e794275c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.998\n",
      "1.0\n",
      "1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->(x[i_c][\"bi_e\"] + x[i_c][\"bi_c\"] + x[i_c][\"uni\"]), list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = (list_cluster_frac[i_c][\"bi_e\"] + list_cluster_frac[i_c][\"bi_c\"] + list_cluster_frac[i_c][\"uni\"])\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C0\")\n",
    "    \n",
    "    title(\"All\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end\n",
    "\n",
    "# all\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->(x[i_c][\"bi_e\"] + x[i_c][\"bi_c\"] + x[i_c][\"uni\"]), list_cluster_frac_rand)\n",
    "    actual_ = (list_cluster_frac[i_c][\"bi_e\"] + list_cluster_frac[i_c][\"bi_c\"] + list_cluster_frac[i_c][\"uni\"])\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18be7e43-71cf-4f33-b473-cccd223a0da6",
   "metadata": {},
   "source": [
    "### Shuffle matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "a95dc90c-f13e-43cb-8395-e3203c298517",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mProgress: 100%|█████████████████████████████████████████| Time: 0:00:15\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "list_cluster_frac_rand = let\n",
    "    g_c = get_graph_witvliet(2, merge_lr=false, synapse_electrical=false, synapse_chemical=true)\n",
    "    g_e = get_graph_witvliet(2, merge_lr=false, synapse_electrical=true, synapse_chemical=false)\n",
    "    list_node_c = collect(g_c.nodes())\n",
    "    list_node_e = collect(g_e.nodes())\n",
    "    \n",
    "    list_node_all = union(list_node_c, list_node_e)\n",
    "    \n",
    "    list_result = []\n",
    "    \n",
    "    @showprogress for n_rand = 1:n_rand\n",
    "        rand_joint_ec_mat_list = shuffle(joint_ec_mat_list)\n",
    "        # rand_joint_ec_mat_list = sample(list_node_all, length(joint_ec_mat_list), replace=false)\n",
    "    \n",
    "        list_fraction = []\n",
    "\n",
    "        for (i_clust, cluster_idx) = enumerate(list_cluster_idx)\n",
    "            list_neurons = rand_joint_ec_mat_list[cluster_idx]\n",
    "\n",
    "            n_no = 0\n",
    "            n_uni = 0\n",
    "            n_bi_e = 0\n",
    "            n_bi_c = 0\n",
    "\n",
    "            for (i1,n1) = enumerate(list_neurons)\n",
    "                for (i2,n2) = enumerate(list_neurons)\n",
    "                    list_n1 = get_match_neuron(n1, list_node_all)\n",
    "                    list_n2 = get_match_neuron(n2, list_node_all)\n",
    "\n",
    "\n",
    "                    for n1_ = list_n1, n2_ = list_n2\n",
    "                        n_q_edge_g_c = g_c.has_edge(n1_, n2_) + g_c.has_edge(n2_, n1_)\n",
    "                        n_q_edge_g_e = g_e.has_edge(n1_, n2_) + g_e.has_edge(n2_, n1_)\n",
    "\n",
    "                        if n_q_edge_g_c + n_q_edge_g_e  == 0\n",
    "                            n_no += 1\n",
    "                        elseif n_q_edge_g_c == 1 && n_q_edge_g_e == 0\n",
    "                            n_uni += 1\n",
    "                        elseif n_q_edge_g_c == 2\n",
    "                            n_bi_c += 1\n",
    "                        elseif n_q_edge_g_e == 2\n",
    "                            n_bi_e += 1\n",
    "                        else\n",
    "                            error(\"n_q_edge is $n_q_edge for $n1 and $n2\")\n",
    "                        end\n",
    "                    end\n",
    "\n",
    "                end\n",
    "            end\n",
    "\n",
    "            dict_ = Dict(\"no\"=>n_no, \"uni\"=>n_uni, \"bi_e\"=>n_bi_e, \"bi_c\"=>n_bi_c)\n",
    "            push!(list_fraction, dict_)\n",
    "        end\n",
    "\n",
    "        push!(list_result, list_fraction)\n",
    "    end\n",
    "    \n",
    "    list_result\n",
    "end;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "349e3426-ccf7-4821-8844-993a923c07ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->x[i_c][\"bi_e\"], list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = list_cluster_frac[i_c][\"bi_e\"]\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C3\")\n",
    "    \n",
    "    title(\"Electrical\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "3f187642-6074-4c8f-8528-b91691c51ef2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->x[i_c][\"uni\"], list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = list_cluster_frac[i_c][\"uni\"]\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C1\")\n",
    "    \n",
    "    \n",
    "    title(\"Chemical (unidirectional)\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    \n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "25e65711-027f-466c-b9a5-d6a97760bde6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.895\n",
      "0.979\n",
      "0.701\n"
     ]
    }
   ],
   "source": [
    "# gap junction\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->x[i_c][\"bi_e\"], list_cluster_frac_rand)\n",
    "    actual_ = list_cluster_frac[i_c][\"bi_e\"]\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "df839fcd-06f8-4f58-a1f8-f115c3883ba6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.155\n",
      "0.985\n",
      "0.191\n"
     ]
    }
   ],
   "source": [
    "# uni-directional\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->x[i_c][\"uni\"], list_cluster_frac_rand)\n",
    "    actual_ = list_cluster_frac[i_c][\"uni\"]\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "25fb79fd-06ca-4da5-bc2b-c67f03fec1e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.299\n",
      "0.976\n",
      "0.178\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Figure(PyObject <Figure size 150x200 with 1 Axes>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(figsize=(1.5,2))\n",
    "for i_c = 1:3\n",
    "    vp = matplotlib.pyplot.violinplot(map(x->(x[i_c][\"bi_e\"] + x[i_c][\"bi_c\"] + x[i_c][\"uni\"]), list_cluster_frac_rand), positions=[i_c], showmedians=true, showextrema=false)\n",
    "    for (comp, c_) = zip(vp[\"bodies\"], [\"k\", \"k\", \"k\", \"k\"])\n",
    "        comp.set_color(c_)\n",
    "    end\n",
    "    vp[\"cmedians\"].set_color(\"k\")\n",
    "    \n",
    "    actual_ = (list_cluster_frac[i_c][\"bi_e\"] + list_cluster_frac[i_c][\"bi_c\"] + list_cluster_frac[i_c][\"uni\"])\n",
    "    plot([i_c-0.1,i_c+0.1],[actual_,actual_], color=\"C0\")\n",
    "    \n",
    "    title(\"All\")\n",
    "    ylabel(\"synapse count\")\n",
    "    xlabel(\"cluster\")\n",
    "    fix_plot()\n",
    "    tight_layout()\n",
    "end\n",
    "\n",
    "# all\n",
    "for i_c = 1:3\n",
    "    list_rand = map(x->(x[i_c][\"bi_e\"] + x[i_c][\"bi_c\"] + x[i_c][\"uni\"]), list_cluster_frac_rand)\n",
    "    actual_ = (list_cluster_frac[i_c][\"bi_e\"] + list_cluster_frac[i_c][\"bi_c\"] + list_cluster_frac[i_c][\"uni\"])\n",
    "    \n",
    "    ec_ = ecdf(list_rand)\n",
    "    println(ec_(actual_))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50381902-33e1-46de-a9c9-b39cd26a90b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ff91149-84e8-4017-9fc2-9736bbe055bf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": "a856fa65-8f50-4aef-add1-3df0e4dc3143",
   "lastKernelId": "bc989e19-9721-4277-b098-76be9bea9df2"
  },
  "kernelspec": {
   "display_name": "Julia (01t) 1.9.0-beta3",
   "language": "julia",
   "name": "julia-_01t_-1.9"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
